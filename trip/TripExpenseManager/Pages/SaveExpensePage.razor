@page "/trips/{tripId:int}/expenses/add"
@page "/trips/{tripId:int}/expenses/{expenseId:long}/edit"

@layout InnerPagesLayout

@inject NavigationManager NavigationManager

@inject MauiInterop Maui
@inject DropdownsService Dropdowns
@inject TripService TripService
@inject AppState AppState

<div class="img-container m-0 p-0 vw-100"></div>

<EditForm Model="_model" OnValidSubmit="SaveExpenseAsync">
    <DataAnnotationsValidator />

    <FormContent Heading="@_title" ButtonText="Ücret Kaydet">
        <div class="mb-3">
            <label class="form-label">Masraf Adı</label>
            <InputText @bind-Value="_model.For" class="form-control rounded-pill fs-6" placeholder="Masraf Adı" />
            <ValidationMessage For="() => _model.For" />
        </div>
        <div class="mb-3">
            <label class="form-label">Ne Kadar</label>
            <InputNumber @bind-Value="_model.Amount" class="form-control rounded-pill fs-6" placeholder="Ne Kadar?" />
            <ValidationMessage For="() => _model.Amount" />
        </div>
        <div class="mb-3">
            <label class="form-label">Kategori</label>
            <InputSelect @bind-Value="_model.Category" class="form-control rounded-pill fs-6">
                <option value="">Kategori Seç</option>
                @foreach (var category in _expenseCategories)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <ValidationMessage For="() => _model.Category" />
        </div>
        <div class="mb-3">
            <label class="form-label">Tarih</label>
            <InputDate @bind-Value="_model.SpentOn" class="form-control rounded-pill fs-6" placeholder="Tarih Seçiniz" />
            <ValidationMessage For="() => _model.SpentOn" />
        </div>
    </FormContent>
</EditForm>

@code {

    [Parameter]
    public int TripId { get; set; }

    [Parameter]
    public long? ExpenseId { get; set; }

    Expense _model = new();

    private string[] _expenseCategories = Array.Empty<string>();

    private string _title = "Ücret";

    protected override async Task OnInitializedAsync()
    {
        AppState.NoTabbarItems();
        Maui.ShowLoader();
        _expenseCategories = await Dropdowns.GetExpenseCategoriesAsync();
        if(ExpenseId.HasValue && ExpenseId > 0)
        {
            _title = "Masraf Düzenle";
            _model = await TripService.GetExpenseAsync(ExpenseId.Value);
        }
        AppState.SetInnerPageTitle(_title);
        Maui.HideLoader();
        _model.TripId = TripId;
    }

    private async Task SaveExpenseAsync()
    {
        Maui.ShowLoader();
        try
        {
            var result = await TripService.SaveExpenseAsync(_model);
            if (result.IsSuccess)
            {
                await Maui.ShowToastAsync("Masraf Düzenlendi");
                NavigationManager.GoBack();
            }
            else
            {
                await Maui.ShowErrorAlertAsync(result.Error ?? "Masraf Oluşturulamadı");
            }
        }
        catch (Exception ex)
        {
            await Maui.ShowErrorAlertAsync(ex.Message);
        }
        finally
        {
            Maui.HideLoader();
        }
    }
}

<style type="text/css">
    .img-container {
        background-image: url('/images/money.jpg');
        background-position-y: -100px;
        height: 250px;
    }

    .category-img {
        width: 25px;
        height: 25px;
    }

    .category-label {
        font-size: 12px;
    }
</style>

